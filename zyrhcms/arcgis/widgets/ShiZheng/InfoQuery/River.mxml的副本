<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// 
// 道路查询
// 
///////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:Search="widgets.Search.*"
				   xmlns:viewer="com.esri.viewer.*"
				   xmlns:esri="http://www.esri.com/2008/ags" widgetConfigLoaded="basewidget_widgetConfigLoadedHandler(event)"
				   xmlns:components="com.esri.viewer.components.*" creationComplete="init()"
				   x="600" y="300"  xmlns:controls="com.adou.ui.controls.*" xmlns:massz="components.massz.*">	
	
	<fx:Script>
		<![CDATA[
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.layers.GraphicsLayer;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.AsyncResponder;
			import mx.rpc.Responder;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import org.flexunit.runner.Result;
			[Bindable]private var lastDrawGeom:Geometry = null;
			[Bindable]private var arrColl:ArrayCollection = new ArrayCollection;
			[Bindable]private var graphicsLayerToPoint:GraphicsLayer = new GraphicsLayer;
			public function deleteAlarmRecord():void
			{  
				map.addLayer(graphicsLayerToPoint);
				//clickGraphicsLayer.clear();
				graphicsLayerToPoint.clear();
				var selObj:Object = dg.selectedItem;
				var gra:Graphic = selObj.gra;
				gra.symbol = sms;
				graphicsLayerToPoint.add(gra);
				var mp:MapPoint = gra.geometry as MapPoint;
				map.centerAt(mp);
				map.scale = 10000;
				map.addLayer(graphicsLayerToPoint);
			}  
			//确认告警信息  
			public function confirmAlarmInfo():void
			{  
				
			}  
			
			protected function queryType_changeHandler(event:Event):void
			{
				this.currentState = queryType.selectedValue.toString();
			}
			
			protected function queryBtn_clickHandler(event:MouseEvent):void
			{
				graphicsLayer.clear();
				queryBtn.label = "正在查询...";
				queryBtn.enabled = false;
				query = new Query;
				if(this.currentState == "normalSearch")
				{
					query.returnGeometry = true;
					query.outFields = ["*"];
					query.where = "名称 like '%"+txt1.text+"%'";
					queryTask.execute(query,new AsyncResponder(result,fault));
				}
				else if(this.currentState == "drawSearch")
				{
					if(lastDrawGeom != null )
					{
						doSearch(regionSearch.lastDrawGeom);
					}
				}
			}
			
			protected function result(featureSet:FeatureSet,token:Object = null):void
			{
				queryTask.execute(query);
				arrColl = createData(featureSet.features);	
				queryBtn.enabled = true;
				queryBtn.label = "查询";
			}
			
			[Bindable]private var graphicsLayer:GraphicsLayer = new GraphicsLayer;
			private function createData(features:Array):ArrayCollection
			{
				var arrayList:ArrayCollection = new ArrayCollection();
				//graphicsLayer.clear();
				for each(var gra:Graphic in features)
				{	
					var obj:Object = gra.attributes;
					
					//gra.symbol = ;
					
					//graphicsLayer.add(gra);
					//map.addLayer(graphicsLayer);					
					if(obj["geometry"] == null)
					{
						obj["geometry"] = gra.geometry;
					}
					if(obj["gra"] == null)
					{
						obj["gra"] = gra;
					}
					arrayList.addItem(obj);
				} 
				return arrayList;
			}
			
			protected function fault(info:Object, token:Object = null):void
			{
				mx.controls.Alert.show(info.toString());
			}
			
			protected function regionSearch_geomUpdatedHandler(event:Event):void
			{
				graphicsLayer = regionSearch.graphicsLayer;
				lastDrawGeom =  regionSearch.lastDrawGeom; 
			}
			
			private function doSearch(thisGeometry:Geometry):void
			{	
				query.returnGeometry = true;
				query.outFields = ["*"];
				query.outSpatialReference = map.spatialReference;
				query.geometry = thisGeometry;
				var getConfigData:Date; 
				queryTask.execute(query,new AsyncResponder(result,fault)); 	
			}
			
			[Bindable]private var queryTaskUrl:String = new String;
			protected function init():void
			{
				
			}
			
			protected function basewidget_widgetConfigLoadedHandler(event:Event):void
			{
				if(configXML)
				{
					var layerID:String = configXML..queryLayerID;
					queryTaskUrl = configData.querymap1 + layerID
				}
				
			}
			
			protected function wTemplate_closedHandler(event:Event):void
			{
				arrColl = new ArrayCollection;
				graphicsLayer.clear();
				graphicsLayerToPoint.clear();
			}
			
			protected function wTemplate_openHandler(event:Event):void
			{
				if(graphicsLayer!=null)
				{
					graphicsLayer.visible = true;
				}
				if(graphicsLayerToPoint!=null)
				{
					graphicsLayerToPoint.visible = true;
				}
			}
			
			protected function wTemplate_minimizedHandler(event:Event):void
			{
				graphicsLayer.visible = false;
				graphicsLayerToPoint.visible = false;
				
			}
			
		]]>
	</fx:Script>
	
	<viewer:states>
		<s:State name="normalSearch"/>
		<s:State name="clickSearch"/>
		<s:State name="drawSearch"/>
		<s:State name="moveSearch"/>
	</viewer:states>
	
	<viewer:transitions>
		<s:Transition autoReverse="true" toState="*">
			<s:Fade id="fade"/>
		</s:Transition>
	</viewer:transitions>
	
	<fx:Declarations>
		<esri:SimpleMarkerSymbol id="sms"
								 color="0x0000FF"
								 size="15"
								 style="diamond"/>
		<esri:SimpleMarkerSymbol id="sms1"
								 color="0x000d0F"
								 size="15"
								 style="diamond"/>
		<esri:SimpleLineSymbol id="sls"
							   width="2"
							   alpha="0.9"
							   color="0x00ff00"
							   style="solid"/>
		<s:RadioButtonGroup id="queryType" change="queryType_changeHandler(event)"/>
		<s:GlowFilter id="glowFilter"
					  alpha="1"
					  color="{getStyle('focusColor')}"
					  inner="true"
					  strength="2"/>
		<esri:Query id="query" outFields="*" returnGeometry="true"/>
		<esri:QueryTask id="queryTask" url="{queryTaskUrl}"/>
	</fx:Declarations>
	
	<viewer:WidgetTemplate id="wTemplate" closed="wTemplate_closedHandler(event)" open="wTemplate_openHandler(event)"
						   width="480" height="288" minimized="wTemplate_minimizedHandler(event)">
		<s:VGroup height="100%" width="100%" horizontalAlign="center" verticalAlign="middle">
			<s:HGroup width="100%" height="20" id="serachGroup" horizontalAlign="left" left="40">
				<mx:Label text="查询方式："/>
				<s:RadioButton groupName="queryType" label="条件查询" id="normalRad" value="normalSearch" selected="true"/>
				<s:RadioButton groupName="queryType" label="框选查询" id="drawRad" value="drawSearch"/>
				<s:Button label="查询" id="queryBtn" click="queryBtn_clickHandler(event)"/>
			</s:HGroup>
			<mx:HRule width="100%"/>
			<s:VGroup width="100%" horizontalAlign="left" verticalAlign="middle" includeIn="normalSearch">
				<s:HGroup><mx:Label text="名称："/><s:TextInput id="txt1"/> <!--<mx:Label text="字段2："/><s:TextInput id="txt2"/>--></s:HGroup>
				<!--<s:HGroup><mx:Label text="字段3："/><s:TextInput id="txt3"/> <mx:Label text="字段4："/><s:TextInput id="txt4"/></s:HGroup>-->
			</s:VGroup>
			<s:VGroup width="100%" horizontalAlign="left" verticalAlign="middle" includeIn="drawSearch">
				<massz:RegionDrawTool id="regionSearch" width="100%"
									geomUpdated="regionSearch_geomUpdatedHandler(event)"
									map="{map}" widget="{this}"/>
			</s:VGroup>
			<mx:HRule width="100%"/>
			<s:DataGrid id="dg"  width="100%" height="108" dataProvider="{pageCon.currentPageData}" alternatingRowColors="[0xFFFFFF, 0xCEFFCE]">
				<s:columns>
					<s:ArrayList>
						<s:GridColumn dataField="名称" headerText="名称"/>
						<s:GridColumn dataField="经度" headerText="经度"/>
						<s:GridColumn dataField="纬度" headerText="纬度"/>
						<!--<s:GridColumn dataField="CODE" headerText="CODE"/>-->
						<s:GridColumn headerText="操作">  
							<s:itemRenderer>  
								<fx:Component>  
									<s:GridItemRenderer>  
										<s:HGroup>   
											<mx:LinkButton toolTip="定位" click="outerDocument.deleteAlarmRecord();" 
														   textDecoration="underline" color="#2066CF" fontWeight="normal" label="定位"/>   
											<!--<mx:LinkButton toolTip="查看详细信息" click="outerDocument.confirmAlarmInfo()" 
														   textDecoration="underline" color="#2066CF" fontWeight="normal" label="详细"/>   -->
										</s:HGroup>  
									</s:GridItemRenderer>  
								</fx:Component>  
							</s:itemRenderer>  
						</s:GridColumn> 
					</s:ArrayList>
				</s:columns>
			</s:DataGrid>
			<s:HGroup>
				<controls:PageControl dataProvider="{arrColl}"  pageCount="3" id="pageCon"/>
			</s:HGroup> 
		</s:VGroup>
	</viewer:WidgetTemplate>
	
</viewer:BaseWidget>
