(function (a, b) { if (typeof exports == "object") { module.exports = b() } else { if (typeof define == "function" && define.amd) { define(b) } else { a.Spinner = b() } } }(this, function () { var e = ["webkit", "Moz", "ms", "O"], o = {}, n; function g(p, s) { var q = document.createElement(p || "div"), r; for (r in s) { q[r] = s[r] } return q } function h(q) { for (var p = 1, r = arguments.length; p < r; p++) { q.appendChild(arguments[p]) } return q } var i = (function () { var p = g("style", { type: "text/css" }); h(document.getElementsByTagName("head")[0], p); return p.sheet || p.styleSheet }()); function c(t, p, u, x) { var q = ["opacity", p, ~~(t * 100), u, x].join("-"), r = 0.01 + u / x * 100, w = Math.max(1 - (1 - t) / p * (100 - r), t), v = n.substring(0, n.indexOf("Animation")).toLowerCase(), s = v && "-" + v + "-" || ""; if (!o[q]) { i.insertRule("@" + s + "keyframes " + q + "{" + "0%{opacity:" + w + "}" + r + "%{opacity:" + t + "}" + (r + 0.01) + "%{opacity:1}" + (r + p) % 100 + "%{opacity:" + t + "}" + "100%{opacity:" + w + "}" + "}", i.cssRules.length); o[q] = 1 } return q } function m(t, u) { var r = t.style, p, q; if (r[u] !== undefined) { return u } u = u.charAt(0).toUpperCase() + u.slice(1); for (q = 0; q < e.length; q++) { p = e[q] + u; if (r[p] !== undefined) { return p } } } function f(p, r) { for (var q in r) { p.style[m(p, q) || q] = r[q] } return p } function k(r) { for (var p = 1; p < arguments.length; p++) { var q = arguments[p]; for (var s in q) { if (r[s] === undefined) { r[s] = q[s] } } } return r } function j(p) { var q = { x: p.offsetLeft, y: p.offsetTop }; while ((p = p.offsetParent)) { q.x += p.offsetLeft, q.y += p.offsetTop } return q } var d = { lines: 12, length: 7, width: 5, radius: 10, rotate: 0, corners: 1, color: "#000", direction: 1, speed: 1, trail: 100, opacity: 1 / 4, fps: 20, zIndex: 2000000000, className: "spinner", top: "auto", left: "auto", position: "relative" }; function b(p) { if (typeof this == "undefined") { return new b(p) } this.opts = k(p || {}, b.defaults, d) } b.defaults = {}; k(b.prototype, { spin: function (y) { this.stop(); var C = this, q = C.opts, r = C.el = f(g(0, { className: q.className }), { position: q.position, width: 0, zIndex: q.zIndex }), B = q.radius + q.length + q.width, D, A; if (y) { y.insertBefore(r, y.firstChild || null); A = j(y); D = j(r); f(r, { left: (q.left == "auto" ? A.x - D.x + (y.offsetWidth >> 1) : parseInt(q.left, 10) + B) + "px", top: (q.top == "auto" ? A.y - D.y + (y.offsetHeight >> 1) : parseInt(q.top, 10) + B) + "px" }) } r.setAttribute("role", "progressbar"); C.lines(r, C.opts); if (!n) { var v = 0, p = (q.lines - 1) * (1 - q.direction) / 2, u, s = q.fps, x = s / q.speed, w = (1 - q.opacity) / (x * q.trail / 100), z = x / q.lines; (function t() { v++; for (var E = 0; E < q.lines; E++) { u = Math.max(1 - (v + (q.lines - E) * z) % x * w, q.opacity); C.opacity(r, E * q.direction + p, u, q) } C.timeout = C.el && setTimeout(t, ~~(1000 / s)) })() } return C }, stop: function () { var p = this.el; if (p) { clearTimeout(this.timeout); if (p.parentNode) { p.parentNode.removeChild(p) } this.el = undefined } return this }, lines: function (r, t) { var q = 0, u = (t.lines - 1) * (1 - t.direction) / 2, p; function s(v, w) { return f(g(), { position: "absolute", width: (t.length + t.width) + "px", height: t.width + "px", background: v, boxShadow: w, transformOrigin: "left", transform: "rotate(" + ~~(360 / t.lines * q + t.rotate) + "deg) translate(" + t.radius + "px" + ",0)", borderRadius: (t.corners * t.width >> 1) + "px" }) } for (; q < t.lines; q++) { p = f(g(), { position: "absolute", top: 1 + ~(t.width / 2) + "px", transform: t.hwaccel ? "translate3d(0,0,0)" : "", opacity: t.opacity, animation: n && c(t.opacity, t.trail, u + q * t.direction, t.lines) + " " + 1 / t.speed + "s linear infinite" }); if (t.shadow) { h(p, f(s("#000", "0 0 4px " + "#000"), { top: 2 + "px" })) } h(r, h(p, s(t.color, "0 0 1px rgba(0,0,0,.1)"))) } return r }, opacity: function (q, p, r) { if (p < q.childNodes.length) { q.childNodes[p].style.opacity = r } } }); function l() { function p(r, q) { return g("<" + r + ' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">', q) } i.addRule(".spin-vml", "behavior:url(#default#VML)"); b.prototype.lines = function (u, t) { var q = t.length + t.width, A = 2 * q; function z() { return f(p("group", { coordsize: A + " " + A, coordorigin: -q + " " + -q }), { width: A, height: A }) } var v = -(t.width + t.length) * 2 + "px", y = f(z(), { position: "absolute", top: v, left: v }), x; function w(s, r, B) { h(y, h(f(z(), { rotation: 360 / t.lines * s + "deg", left: ~~r }), h(f(p("roundrect", { arcsize: t.corners }), { width: q, height: t.width, left: t.radius, top: -t.width >> 1, filter: B }), p("fill", { color: t.color, opacity: t.opacity }), p("stroke", { opacity: 0 })))) } if (t.shadow) { for (x = 1; x <= t.lines; x++) { w(x, -2, "progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)") } } for (x = 1; x <= t.lines; x++) { w(x) } return h(u, y) }; b.prototype.opacity = function (r, q, t, s) { var u = r.firstChild; s = s.shadow && s.lines || 0; if (u && q + s < u.childNodes.length) { u = u.childNodes[q + s]; u = u && u.firstChild; u = u && u.firstChild; if (u) { u.opacity = t } } } } var a = f(g("group"), { behavior: "url(#default#VML)" }); if (!m(a, "transform") && a.adj) { l() } else { n = m(a, "animation") } return b })); (function (a, b) { if (typeof exports === "object") { module.exports = b() } else { if (typeof define === "function" && define.amd) { define(["spin"], b) } else { a.Ladda = b(a.Spinner) } } }(this, function (c) { var d = []; function b(h) { if (typeof h === "undefined") { throw "Button target must be defined." } if (!h.querySelector(".ladda-label")) { h.innerHTML = '<span class="ladda-label">' + h.innerHTML + "</span>" } var k = e(h); var j = document.createElement("span"); j.className = "ladda-spinner"; h.appendChild(j); var i; var g = { start: function () { h.setAttribute("disabled", ""); h.setAttribute("data-loading", ""); clearTimeout(i); k.spin(j); this.setProgress(0); return this }, stop: function () { h.removeAttribute("disabled"); h.removeAttribute("data-loading"); clearTimeout(i); i = setTimeout(function () { k.stop() }, 1000); return this }, toggle: function () { if (this.isLoading()) { this.stop() } else { this.start() } return this }, setProgress: function (l) { var m = h.querySelector(".ladda-progress"); if (l === 0 && m && m.parentNode) { m.parentNode.removeChild(m) } else { if (!m) { m = document.createElement("div"); m.className = "ladda-progress"; h.appendChild(m) } m.style.width = ((l || 0) * h.offsetWidth) + "px" } }, enable: function () { this.stop(); return this }, disable: function () { this.stop(); h.setAttribute("disabled", ""); return this }, isLoading: function () { return h.hasAttribute("data-loading") } }; d.push(g); return g } function f(h, g) { g = g || {}; $(h).click(function (j) { if (parseFloat($.browser.version) < 9) { j.setProgress = function (l) { }; j.stop = function () { }; g.callback(j); return } var i = b(this); var k = -1; i.start(); if (typeof g.timeout === "number") { clearTimeout(k); k = setTimeout(i.stop, g.timeout) } if (typeof g.callback === "function") { g.callback.apply(null, [i]) } }) } function a() { for (var h = 0, g = d.length; h < g; h++) { d[h].stop() } } function e(j) { var h = j.offsetHeight; if (h > 32) { h *= 0.8 } if (j.hasAttribute("data-spinner-size")) { h = parseInt(j.getAttribute("data-spinner-size"), 10) } var i = 12, g = h * 0.2, l = g * 0.6, k = g < 7 ? 2 : 3; return new c({ color: "#fff", lines: i, radius: g, length: l, width: k, zIndex: "initial", top: "auto", left: "auto", className: "" }) } return { bind: f, create: b, stopAll: a } })); (function (a) { a.fn.LaddaClick = function (b) { Ladda.bind(this, { callback: b }) } })($); (function (c, d) { c.support.htmlMenuitem = ("HTMLMenuItemElement" in window); c.support.htmlCommand = ("HTMLCommandElement" in window); c.support.eventSelectstart = ("onselectstart" in document.documentElement); if (!c.ui || !c.ui.widget) { var q = c.cleanData; c.cleanData = function (s) { for (var t = 0, u; (u = s[t]) != null; t++) { try { c(u).triggerHandler("remove") } catch (v) { } } q(s) } } var p = null, b = false, n = c(window), h = 0, g = {}, l = {}, k = {}, i = { selector: null, appendTo: null, trigger: "right", autoHide: false, delay: 200, reposition: true, determinePosition: function (s) { if (c.ui && c.ui.position) { s.css("display", "block").position({ my: "center top", at: "center bottom", of: this, offset: "0 5", collision: "fit" }).css("display", "none") } else { var t = this.offset(); t.top += this.outerHeight(); t.left += this.outerWidth() / 2 - s.outerWidth() / 2; s.css(t) } }, position: function (u, A, z) { var w = this, v; if (!A && !z) { u.determinePosition.call(this, u.$menu); return } else { if (A === "maintain" && z === "maintain") { v = u.$menu.position() } else { v = { top: z, left: A } } } var s = n.scrollTop() + n.height(), B = n.scrollLeft() + n.width(), C = u.$menu.height(), t = u.$menu.width(); if (v.top + C > s) { v.top -= C } if (v.left + t > B) { v.left -= t } u.$menu.css(v) }, positionSubmenu: function (s) { if (c.ui && c.ui.position) { s.css("display", "block").position({ my: "left top", at: "right top", of: this, collision: "flipfit fit" }).css("display", "") } else { var t = { top: 0, left: this.outerWidth() }; s.css(t) } }, zIndex: 1, animation: { duration: 50, show: "slideDown", hide: "slideUp" }, events: { show: c.noop, hide: c.noop }, callback: null, items: {} }, j = { timer: null, pageX: null, pageY: null }, e = function (u) { var t = 0, s = u; while (true) { t = Math.max(t, parseInt(s.css("z-index"), 10) || 0); s = s.parent(); if (!s || !s.length || "html body".indexOf(s.prop("nodeName").toLowerCase()) > -1) { break } } return t }, r = { abortevent: function (s) { s.preventDefault(); s.stopImmediatePropagation() }, contextmenu: function (u) { var t = c(this); u.preventDefault(); u.stopImmediatePropagation(); if (u.data.trigger != "right" && u.originalEvent) { return } if (t.hasClass("context-menu-active")) { return } if (!t.hasClass("context-menu-disabled")) { p = t; if (u.data.build) { var s = u.data.build(p, u); if (s === false) { return } u.data = c.extend(true, {}, i, u.data, s || {}); if (!u.data.items || c.isEmptyObject(u.data.items)) { if (window.console) { (console.error || console.log)("No items specified to show in contextMenu") } throw new Error("No Items sepcified") } u.data.$trigger = p; f.create(u.data) } f.show.call(t, u.data, u.pageX, u.pageY) } }, click: function (s) { s.preventDefault(); s.stopImmediatePropagation(); c(this).trigger(c.Event("contextmenu", { data: s.data, pageX: s.pageX, pageY: s.pageY })) }, mousedown: function (t) { var s = c(this); if (p && p.length && !p.is(s)) { p.data("contextMenu").$menu.trigger("contextmenu:hide") } if (t.button == 2) { p = s.data("contextMenuActive", true) } }, mouseup: function (t) { var s = c(this); if (s.data("contextMenuActive") && p && p.length && p.is(s) && !s.hasClass("context-menu-disabled")) { t.preventDefault(); t.stopImmediatePropagation(); p = s; s.trigger(c.Event("contextmenu", { data: t.data, pageX: t.pageX, pageY: t.pageY })) } s.removeData("contextMenuActive") }, mouseenter: function (u) { var t = c(this), s = c(u.relatedTarget), v = c(document); if (s.is(".context-menu-list") || s.closest(".context-menu-list").length) { return } if (p && p.length) { return } j.pageX = u.pageX; j.pageY = u.pageY; j.data = u.data; v.on("mousemove.contextMenuShow", r.mousemove); j.timer = setTimeout(function () { j.timer = null; v.off("mousemove.contextMenuShow"); p = t; t.trigger(c.Event("contextmenu", { data: j.data, pageX: j.pageX, pageY: j.pageY })) }, u.data.delay) }, mousemove: function (s) { j.pageX = s.pageX; j.pageY = s.pageY }, mouseleave: function (t) { var s = c(t.relatedTarget); if (s.is(".context-menu-list") || s.closest(".context-menu-list").length) { return } try { clearTimeout(j.timer) } catch (t) { } j.timer = null }, layerClick: function (v) { var z = c(this), B = z.data("contextMenuRoot"), t = false, u = v.button, C = v.pageX, A = v.pageY, w, s, D; v.preventDefault(); v.stopImmediatePropagation(); setTimeout(function () { var F, E, y; var x = ((B.trigger == "left" && u === 0) || (B.trigger == "right" && u === 2)); if (document.elementFromPoint) { B.$layer.hide(); w = document.elementFromPoint(C - n.scrollLeft(), A - n.scrollTop()); B.$layer.show() } if (B.reposition && x) { if (document.elementFromPoint) { if (B.$trigger.is(w) || B.$trigger.has(w).length) { B.position.call(B.$trigger, B, C, A); return } } else { s = B.$trigger.offset(); F = c(window); s.top += F.scrollTop(); if (s.top <= v.pageY) { s.left += F.scrollLeft(); if (s.left <= v.pageX) { s.bottom = s.top + B.$trigger.outerHeight(); if (s.bottom >= v.pageY) { s.right = s.left + B.$trigger.outerWidth(); if (s.right >= v.pageX) { B.position.call(B.$trigger, B, C, A); return } } } } } } if (w && x) { B.$trigger.one("contextmenu:hidden", function () { c(w).contextMenu({ x: C, y: A }) }) } B.$menu.trigger("contextmenu:hide") }, 50) }, keyStop: function (t, s) { if (!s.isInput) { t.preventDefault() } t.stopPropagation() }, key: function (w) { var u = p.data("contextMenu") || {}; switch (w.keyCode) { case 9: case 38: r.keyStop(w, u); if (u.isInput) { if (w.keyCode == 9 && w.shiftKey) { w.preventDefault(); u.$selected && u.$selected.find("input, textarea, select").blur(); u.$menu.trigger("prevcommand"); return } else { if (w.keyCode == 38 && u.$selected.find("input, textarea, select").prop("type") == "checkbox") { w.preventDefault(); return } } } else { if (w.keyCode != 9 || w.shiftKey) { u.$menu.trigger("prevcommand"); return } } case 40: r.keyStop(w, u); if (u.isInput) { if (w.keyCode == 9) { w.preventDefault(); u.$selected && u.$selected.find("input, textarea, select").blur(); u.$menu.trigger("nextcommand"); return } else { if (w.keyCode == 40 && u.$selected.find("input, textarea, select").prop("type") == "checkbox") { w.preventDefault(); return } } } else { u.$menu.trigger("nextcommand"); return } break; case 37: r.keyStop(w, u); if (u.isInput || !u.$selected || !u.$selected.length) { break } if (!u.$selected.parent().hasClass("context-menu-root")) { var v = u.$selected.parent().parent(); u.$selected.trigger("contextmenu:blur"); u.$selected = v; return } break; case 39: r.keyStop(w, u); if (u.isInput || !u.$selected || !u.$selected.length) { break } var t = u.$selected.data("contextMenu") || {}; if (t.$menu && u.$selected.hasClass("context-menu-submenu")) { u.$selected = null; t.$selected = null; t.$menu.trigger("nextcommand"); return } break; case 35: case 36: if (u.$selected && u.$selected.find("input, textarea, select").length) { return } else { (u.$selected && u.$selected.parent() || u.$menu).children(":not(.disabled, .not-selectable)")[w.keyCode == 36 ? "first" : "last"]().trigger("contextmenu:focus"); w.preventDefault(); return } break; case 13: r.keyStop(w, u); if (u.isInput) { if (u.$selected && !u.$selected.is("textarea, select")) { w.preventDefault(); return } break } u.$selected && u.$selected.trigger("mouseup"); return; case 32: case 33: case 34: r.keyStop(w, u); return; case 27: r.keyStop(w, u); u.$menu.trigger("contextmenu:hide"); return; default: var s = (String.fromCharCode(w.keyCode)).toUpperCase(); if (u.accesskeys[s]) { u.accesskeys[s].$node.trigger(u.accesskeys[s].$menu ? "contextmenu:focus" : "mouseup"); return } break } w.stopPropagation(); u.$selected && u.$selected.trigger(w) }, prevItem: function (w) { w.stopPropagation(); var v = c(this).data("contextMenu") || {}; if (v.$selected) { var s = v.$selected; v = v.$selected.parent().data("contextMenu") || {}; v.$selected = s } var u = v.$menu.children(), t = !v.$selected || !v.$selected.prev().length ? u.last() : v.$selected.prev(), y = t; while (t.hasClass("disabled") || t.hasClass("not-selectable")) { if (t.prev().length) { t = t.prev() } else { t = u.last() } if (t.is(y)) { return } } if (v.$selected) { r.itemMouseleave.call(v.$selected.get(0), w) } r.itemMouseenter.call(t.get(0), w); var x = t.find("input, textarea, select"); if (x.length) { x.focus() } }, nextItem: function (w) { w.stopPropagation(); var v = c(this).data("contextMenu") || {}; if (v.$selected) { var s = v.$selected; v = v.$selected.parent().data("contextMenu") || {}; v.$selected = s } var u = v.$menu.children(), t = !v.$selected || !v.$selected.next().length ? u.first() : v.$selected.next(), y = t; while (t.hasClass("disabled") || t.hasClass("not-selectable")) { if (t.next().length) { t = t.next() } else { t = u.first() } if (t.is(y)) { return } } if (v.$selected) { r.itemMouseleave.call(v.$selected.get(0), w) } r.itemMouseenter.call(t.get(0), w); var x = t.find("input, textarea, select"); if (x.length) { x.focus() } }, focusInput: function (w) { var v = c(this).closest(".context-menu-item"), u = v.data(), t = u.contextMenu, s = u.contextMenuRoot; s.$selected = t.$selected = v; s.isInput = t.isInput = true }, blurInput: function (w) { var v = c(this).closest(".context-menu-item"), u = v.data(), t = u.contextMenu, s = u.contextMenuRoot; s.isInput = t.isInput = false }, menuMouseenter: function (t) { var s = c(this).data().contextMenuRoot; s.hovering = true }, menuMouseleave: function (t) { var s = c(this).data().contextMenuRoot; if (s.$layer && s.$layer.is(t.relatedTarget)) { s.hovering = false } }, itemMouseenter: function (w) { var v = c(this), u = v.data(), t = u.contextMenu, s = u.contextMenuRoot; s.hovering = true; if (w && s.$layer && s.$layer.is(w.relatedTarget)) { w.preventDefault(); w.stopImmediatePropagation() } (t.$menu ? t : s).$menu.children(".hover").trigger("contextmenu:blur"); if (v.hasClass("disabled") || v.hasClass("not-selectable")) { t.$selected = null; return } v.trigger("contextmenu:focus") }, itemMouseleave: function (w) { var v = c(this), u = v.data(), t = u.contextMenu, s = u.contextMenuRoot; if (s !== t && s.$layer && s.$layer.is(w.relatedTarget)) { s.$selected && s.$selected.trigger("contextmenu:blur"); w.preventDefault(); w.stopImmediatePropagation(); s.$selected = t.$selected = t.$node; return } v.trigger("contextmenu:blur") }, itemClick: function (x) { var w = c(this), v = w.data(), u = v.contextMenu, s = v.contextMenuRoot, t = v.contextMenuKey, y; if (!u.items[t] || w.is(".disabled, .context-menu-submenu, .context-menu-separator, .not-selectable")) { return } x.preventDefault(); x.stopImmediatePropagation(); if (c.isFunction(s.callbacks[t]) && Object.prototype.hasOwnProperty.call(s.callbacks, t)) { y = s.callbacks[t] } else { if (c.isFunction(s.callback)) { y = s.callback } else { return } } if (y.call(s.$trigger, t, s) !== false) { s.$menu.trigger("contextmenu:hide") } else { if (s.$menu.parent().length) { f.update.call(s.$trigger, s) } } }, inputClick: function (s) { s.stopImmediatePropagation() }, hideMenu: function (u, t) { var s = c(this).data("contextMenuRoot"); f.hide.call(s.$trigger, s, t && t.force) }, focusItem: function (w) { w.stopPropagation(); var v = c(this), u = v.data(), t = u.contextMenu, s = u.contextMenuRoot; v.addClass("hover").siblings(".hover").trigger("contextmenu:blur"); t.$selected = s.$selected = v; if (t.$node) { s.positionSubmenu.call(t.$node, t.$menu) } }, blurItem: function (w) { w.stopPropagation(); var v = c(this), u = v.data(), t = u.contextMenu, s = u.contextMenuRoot; v.removeClass("hover"); t.$selected = null } }, f = { show: function (v, t, z) { var s = c(this), w, u = {}; c("#context-menu-layer").trigger("mousedown"); v.$trigger = s; if (v.events.show.call(s, v) === false) { p = null; return } f.update.call(s, v); v.position.call(s, v, t, z); if (v.zIndex) { u.zIndex = e(s) + v.zIndex } f.layer.call(v.$menu, v, u.zIndex); v.$menu.find("ul").css("zIndex", u.zIndex + 1); v.$menu.css(u)[v.animation.show](v.animation.duration, function () { s.trigger("contextmenu:visible") }); s.data("contextMenu", v).addClass("context-menu-active"); c(document).off("keydown.contextMenu").on("keydown.contextMenu", r.key); if (v.autoHide) { c(document).on("mousemove.contextMenuAutoHide", function (x) { var y = s.offset(); y.right = y.left + s.outerWidth(); y.bottom = y.top + s.outerHeight(); if (v.$layer && !v.hovering && (!(x.pageX >= y.left && x.pageX <= y.right) || !(x.pageY >= y.top && x.pageY <= y.bottom))) { v.$menu.trigger("contextmenu:hide") } }) } }, hide: function (t, u) { var s = c(this); if (!t) { t = s.data("contextMenu") || {} } if (!u && t.events && t.events.hide.call(s, t) === false) { return } s.removeData("contextMenu").removeClass("context-menu-active"); if (t.$layer) { setTimeout((function (w) { return function () { w.remove() } })(t.$layer), 10); try { delete t.$layer } catch (v) { t.$layer = null } } p = null; t.$menu.find(".hover").trigger("contextmenu:blur"); t.$selected = null; c(document).off(".contextMenuAutoHide").off("keydown.contextMenu"); t.$menu && t.$menu[t.animation.hide](t.animation.duration, function () { if (t.build) { t.$menu.remove(); c.each(t, function (w, x) { switch (w) { case "ns": case "selector": case "build": case "trigger": return true; default: t[w] = d; try { delete t[w] } catch (y) { } return true } }) } setTimeout(function () { s.trigger("contextmenu:hidden") }, 10) }) }, create: function (t, s) { if (s === d) { s = t } t.$menu = c('<ul class="context-menu-list"></ul>').addClass(t.className || "").data({ "contextMenu": t, "contextMenuRoot": s }); c.each(["callbacks", "commands", "inputs"], function (v, u) { t[u] = {}; if (!s[u]) { s[u] = {} } }); s.accesskeys || (s.accesskeys = {}); c.each(t.items, function (w, x) { var B = c('<li class="context-menu-item"></li>').addClass(x.className || ""), u = null, A = null; B.on("click", c.noop); x.$node = B.data({ "contextMenu": t, "contextMenuRoot": s, "contextMenuKey": w }); if (x.accesskey) { var y = m(x.accesskey); for (var v = 0, z; z = y[v]; v++) { if (!s.accesskeys[z]) { s.accesskeys[z] = x; x._name = x.name.replace(new RegExp("(" + z + ")", "i"), '<span class="context-menu-accesskey">$1</span>'); break } } } if (typeof x == "string") { B.addClass("context-menu-separator not-selectable") } else { if (x.type && k[x.type]) { k[x.type].call(B, x, t, s); c.each([t, s], function (D, C) { C.commands[w] = x; if (c.isFunction(x.callback)) { C.callbacks[w] = x.callback } }) } else { if (x.type == "html") { B.addClass("context-menu-html not-selectable") } else { if (x.type) { u = c("<label></label>").appendTo(B); c("<span></span>").html(x._name || x.name).appendTo(u); B.addClass("context-menu-input"); t.hasTypes = true; c.each([t, s], function (D, C) { C.commands[w] = x; C.inputs[w] = x }) } else { if (x.items) { x.type = "sub" } } } switch (x.type) { case "text": A = c('<input type="text" value="1" name="" value="">').attr("name", "context-menu-input-" + w).val(x.value || "").appendTo(u); break; case "textarea": A = c('<textarea name=""></textarea>').attr("name", "context-menu-input-" + w).val(x.value || "").appendTo(u); if (x.height) { A.height(x.height) } break; case "checkbox": A = c('<input type="checkbox" value="1" name="" value="">').attr("name", "context-menu-input-" + w).val(x.value || "").prop("checked", !!x.selected).prependTo(u); break; case "radio": A = c('<input type="radio" value="1" name="" value="">').attr("name", "context-menu-input-" + x.radio).val(x.value || "").prop("checked", !!x.selected).prependTo(u); break; case "select": A = c('<select name="">').attr("name", "context-menu-input-" + w).appendTo(u); if (x.options) { c.each(x.options, function (C, D) { c("<option></option>").val(C).text(D).appendTo(A) }); A.val(x.selected) } break; case "sub": c("<span></span>").html(x._name || x.name).appendTo(B); x.appendTo = x.$node; f.create(x, s); B.data("contextMenu", x).addClass("context-menu-submenu"); x.callback = null; break; case "html": c(x.html).appendTo(B); break; default: c.each([t, s], function (D, C) { C.commands[w] = x; if (c.isFunction(x.callback)) { C.callbacks[w] = x.callback } }); c("<span></span>").html(x._name || x.name || "").appendTo(B); break } if (x.type && x.type != "sub" && x.type != "html") { A.on("focus", r.focusInput).on("blur", r.blurInput); if (x.events) { A.on(x.events, t) } } if (x.icon) { B.addClass("icon icon-" + x.icon) } } } x.$input = A; x.$label = u; B.appendTo(t.$menu); if (!t.hasTypes && c.support.eventSelectstart) { B.on("selectstart.disableTextSelect", r.abortevent) } }); if (!t.$node) { t.$menu.css("display", "none").addClass("context-menu-root") } t.$menu.appendTo(t.appendTo || document.body) }, resize: function (s, t) { s.css({ position: "absolute", display: "block" }); s.data("width", Math.ceil(s.width()) + 1); s.css({ position: "static", minWidth: "0px", maxWidth: "100000px" }); s.find("> li > ul").each(function () { f.resize(c(this), true) }); if (!t) { s.find("ul").andSelf().css({ position: "", display: "", minWidth: "", maxWidth: "" }).width(function () { return c(this).data("width") }) } }, update: function (u, t) { var s = this; if (t === d) { t = u; f.resize(u.$menu) } u.$menu.children().each(function () { var v = c(this), w = v.data("contextMenuKey"), y = u.items[w], x = (c.isFunction(y.disabled) && y.disabled.call(s, w, t)) || y.disabled === true; v[x ? "addClass" : "removeClass"]("disabled"); if (y.type) { v.find("input, select, textarea").prop("disabled", x); switch (y.type) { case "text": case "textarea": y.$input.val(y.value || ""); break; case "checkbox": case "radio": y.$input.val(y.value || "").prop("checked", !!y.selected); break; case "select": y.$input.val(y.selected || ""); break } } if (y.$menu) { f.update.call(s, y, t) } }) }, layer: function (t, u) { var s = t.$layer = c('<div id="context-menu-layer" style="position:fixed; z-index:' + u + '; top:0; left:0; opacity: 0; filter: alpha(opacity=0); background-color: #000;"></div>').css({ height: n.height(), width: n.width(), display: "block" }).data("contextMenuRoot", t).insertBefore(this).on("contextmenu", r.abortevent).on("mousedown", r.layerClick); if (!c.support.fixedPosition) { s.css({ "position": "absolute", "height": c(document).height() }) } return s } }; function m(x) { var v = x.split(/\s+/), w = []; for (var u = 0, s; s = v[u]; u++) { s = s[0].toUpperCase(); w.push(s) } return w } c.fn.contextMenu = function (s) { if (s === d) { this.first().trigger("contextmenu") } else { if (s.x && s.y) { this.first().trigger(c.Event("contextmenu", { pageX: s.x, pageY: s.y })) } else { if (s === "hide") { var t = this.data("contextMenu").$menu; t && t.trigger("contextmenu:hide") } else { if (s === "destroy") { c.contextMenu("destroy", { context: this }) } else { if (c.isPlainObject(s)) { s.context = this; c.contextMenu("create", s) } else { if (s) { this.removeClass("context-menu-disabled") } else { if (!s) { this.addClass("context-menu-disabled") } } } } } } } return this }; c.contextMenu = function (w, A) { if (typeof w != "string") { A = w; w = "create" } if (typeof A == "string") { A = { selector: A } } else { if (A === d) { A = {} } } var u = c.extend(true, {}, i, A || {}); var v = c(document); var y = v; var z = false; if (!u.context || !u.context.length) { u.context = document } else { y = c(u.context).first(); u.context = y.get(0); z = u.context !== document } switch (w) { case "create": if (!u.selector) { throw new Error("No selector specified") } if (u.selector.match(/.context-menu-(list|item|input)($|\s)/)) { throw new Error('Cannot bind to selector "' + u.selector + '" as it contains a reserved className') } if (!u.build && (!u.items || c.isEmptyObject(u.items))) { throw new Error("No Items sepcified") } h++; u.ns = ".contextMenu" + h; if (!z) { g[u.selector] = u.ns } l[u.ns] = u; if (!u.trigger) { u.trigger = "right" } if (!b) { v.on({ "contextmenu:hide.contextMenu": r.hideMenu, "prevcommand.contextMenu": r.prevItem, "nextcommand.contextMenu": r.nextItem, "contextmenu.contextMenu": r.abortevent, "mouseenter.contextMenu": r.menuMouseenter, "mouseleave.contextMenu": r.menuMouseleave }, ".context-menu-list").on("mouseup.contextMenu", ".context-menu-input", r.inputClick).on({ "mouseup.contextMenu": r.itemClick, "contextmenu:focus.contextMenu": r.focusItem, "contextmenu:blur.contextMenu": r.blurItem, "contextmenu.contextMenu": r.abortevent, "mouseenter.contextMenu": r.itemMouseenter, "mouseleave.contextMenu": r.itemMouseleave }, ".context-menu-item"); b = true } y.on("contextmenu" + u.ns, u.selector, u, r.contextmenu); if (z) { y.on("remove" + u.ns, function () { c(this).contextMenu("destroy") }) } switch (u.trigger) { case "hover": y.on("mouseenter" + u.ns, u.selector, u, r.mouseenter).on("mouseleave" + u.ns, u.selector, u, r.mouseleave); break; case "left": y.on("click" + u.ns, u.selector, u, r.click); break } if (!u.build) { f.create(u) } break; case "destroy": var s; if (z) { var t = u.context; c.each(l, function (B, D) { if (D.context !== t) { return true } s = c(".context-menu-list").filter(":visible"); if (s.length && s.data().contextMenuRoot.$trigger.is(c(D.context).find(D.selector))) { s.trigger("contextmenu:hide", { force: true }) } try { if (l[D.ns].$menu) { l[D.ns].$menu.remove() } delete l[D.ns] } catch (C) { l[D.ns] = null } c(D.context).off(D.ns); return true }) } else { if (!u.selector) { v.off(".contextMenu .contextMenuAutoHide"); c.each(l, function (B, C) { c(C.context).off(C.ns) }); g = {}; l = {}; h = 0; b = false; c("#context-menu-layer, .context-menu-list").remove() } else { if (g[u.selector]) { s = c(".context-menu-list").filter(":visible"); if (s.length && s.data().contextMenuRoot.$trigger.is(u.selector)) { s.trigger("contextmenu:hide", { force: true }) } try { if (l[g[u.selector]].$menu) { l[g[u.selector]].$menu.remove() } delete l[g[u.selector]] } catch (x) { l[g[u.selector]] = null } v.off(g[u.selector]) } } } break; case "html5": if ((!c.support.htmlCommand && !c.support.htmlMenuitem) || (typeof A == "boolean" && A)) { c('menu[type="context"]').each(function () { if (this.id) { c.contextMenu({ selector: "[contextmenu=" + this.id + "]", items: c.contextMenu.fromMenu(this) }) } }).css("display", "none") } break; default: throw new Error('Unknown operation "' + w + '"') } return this }; c.contextMenu.setInputValues = function (s, t) { if (t === d) { t = {} } c.each(s.inputs, function (u, v) { switch (v.type) { case "text": case "textarea": v.value = t[u] || ""; break; case "checkbox": v.selected = t[u] ? true : false; break; case "radio": v.selected = (t[v.radio] || "") == v.value ? true : false; break; case "select": v.selected = t[u] || ""; break } }) }; c.contextMenu.getInputValues = function (s, t) { if (t === d) { t = {} } c.each(s.inputs, function (u, v) { switch (v.type) { case "text": case "textarea": case "select": t[u] = v.$input.val(); break; case "checkbox": t[u] = v.$input.prop("checked"); break; case "radio": if (v.$input.prop("checked")) { t[v.radio] = v.value } break } }); return t }; function o(s) { return (s.id && c('label[for="' + s.id + '"]').val()) || s.name } function a(u, t, s) { if (!s) { s = 0 } t.each(function () { var v = c(this), y = this, z = this.nodeName.toLowerCase(), w, x; if (z == "label" && v.find("input, textarea, select").length) { w = v.text(); v = v.children().first(); y = v.get(0); z = y.nodeName.toLowerCase() } switch (z) { case "menu": x = { name: v.attr("label"), items: {} }; s = a(x.items, v.children(), s); break; case "a": case "button": x = { name: v.text(), disabled: !!v.attr("disabled"), callback: (function () { return function () { v.click() } })() }; break; case "menuitem": case "command": switch (v.attr("type")) { case d: case "command": case "menuitem": x = { name: v.attr("label"), disabled: !!v.attr("disabled"), callback: (function () { return function () { v.click() } })() }; break; case "checkbox": x = { type: "checkbox", disabled: !!v.attr("disabled"), name: v.attr("label"), selected: !!v.attr("checked") }; break; case "radio": x = { type: "radio", disabled: !!v.attr("disabled"), name: v.attr("label"), radio: v.attr("radiogroup"), value: v.attr("id"), selected: !!v.attr("checked") }; break; default: x = d } break; case "hr": x = "-------"; break; case "input": switch (v.attr("type")) { case "text": x = { type: "text", name: w || o(y), disabled: !!v.attr("disabled"), value: v.val() }; break; case "checkbox": x = { type: "checkbox", name: w || o(y), disabled: !!v.attr("disabled"), selected: !!v.attr("checked") }; break; case "radio": x = { type: "radio", name: w || o(y), disabled: !!v.attr("disabled"), radio: !!v.attr("name"), value: v.val(), selected: !!v.attr("checked") }; break; default: x = d; break } break; case "select": x = { type: "select", name: w || o(y), disabled: !!v.attr("disabled"), selected: v.val(), options: {} }; v.children().each(function () { x.options[this.value] = c(this).text() }); break; case "textarea": x = { type: "textarea", name: w || o(y), disabled: !!v.attr("disabled"), value: v.val() }; break; case "label": break; default: x = { type: "html", html: v.clone(true) }; break } if (x) { s++; u["key" + s] = x } }); return s } c.contextMenu.fromMenu = function (t) { var u = c(t), s = {}; a(s, u.children()); return s }; c.contextMenu.defaults = i; c.contextMenu.types = k; c.contextMenu.handle = r; c.contextMenu.op = f; c.contextMenu.menus = l })(jQuery); (function () { var f, a, g, d, e, b = {}.hasOwnProperty, c = function (k, i) { for (var h in i) { if (b.call(i, h)) { k[h] = i[h] } } function j() { this.constructor = k } j.prototype = i.prototype; k.prototype = new j(); k.__super__ = i.prototype; return k }; d = (function () { function h() { this.options_index = 0; this.parsed = [] } h.prototype.add_node = function (i) { if (i.nodeName.toUpperCase() === "OPTGROUP") { return this.add_group(i) } else { return this.add_option(i) } }; h.prototype.add_group = function (o) { var n, k, m, j, l, i; n = this.parsed.length; this.parsed.push({ array_index: n, group: true, label: this.escapeExpression(o.label), children: 0, disabled: o.disabled }); l = o.childNodes; i = []; for (m = 0, j = l.length; m < j; m++) { k = l[m]; i.push(this.add_option(k, n, o.disabled)) } return i }; h.prototype.add_option = function (j, k, i) { if (j.nodeName.toUpperCase() === "OPTION") { if (j.text !== "") { if (k != null) { this.parsed[k].children += 1 } this.parsed.push({ array_index: this.parsed.length, options_index: this.options_index, value: j.value, text: j.text, html: j.innerHTML, selected: j.selected, disabled: i === true ? i : j.disabled, group_array_index: k, classes: j.className, style: j.style.cssText }) } else { this.parsed.push({ array_index: this.parsed.length, options_index: this.options_index, empty: true }) } return this.options_index += 1 } }; h.prototype.escapeExpression = function (k) { var j, i; if ((k == null) || k === false) { return "" } if (!/[\&\<\>\"\'\`]/.test(k)) { return k } j = { "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#x27;", "`": "&#x60;" }; i = /&(?!\w+;)|[\<\>\"\'\`]/g; return k.replace(i, function (l) { return j[l] || "&amp;" }) }; return h })(); d.select_to_array = function (h) { var m, l, k, i, j; l = new d(); j = h.childNodes; for (k = 0, i = j.length; k < i; k++) { m = j[k]; l.add_node(m) } return l.parsed }; a = (function () { function h(i, j) { this.form_field = i; this.options = j != null ? j : {}; if (!h.browser_is_supported()) { return } this.is_multiple = this.form_field.multiple; this.set_default_text(); this.set_default_values(); this.setup(); this.set_up_html(); this.register_observers() } h.prototype.set_default_values = function () { var i = this; this.click_test_action = function (j) { return i.test_active_click(j) }; this.activate_action = function (j) { return i.activate_field(j) }; this.active_field = false; this.mouse_on_container = false; this.results_showing = false; this.result_highlighted = null; this.result_single_selected = null; this.allow_single_deselect = (this.options.allow_single_deselect != null) && (this.form_field.options[0] != null) && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false; this.disable_search_threshold = this.options.disable_search_threshold || 0; this.disable_search = this.options.disable_search || false; this.enable_split_word_search = this.options.enable_split_word_search != null ? this.options.enable_split_word_search : true; this.group_search = this.options.group_search != null ? this.options.group_search : true; this.search_contains = this.options.search_contains || false; this.single_backstroke_delete = this.options.single_backstroke_delete != null ? this.options.single_backstroke_delete : true; this.max_selected_options = this.options.max_selected_options || Infinity; this.inherit_select_classes = this.options.inherit_select_classes || false; this.display_selected_options = this.options.display_selected_options != null ? this.options.display_selected_options : true; return this.display_disabled_options = this.options.display_disabled_options != null ? this.options.display_disabled_options : true }; h.prototype.set_default_text = function () { if (this.form_field.getAttribute("data-placeholder")) { this.default_text = this.form_field.getAttribute("data-placeholder") } else { if (this.is_multiple) { this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || h.default_multiple_text } else { this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || h.default_single_text } } return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || h.default_no_result_text }; h.prototype.mouse_enter = function () { return this.mouse_on_container = true }; h.prototype.mouse_leave = function () { return this.mouse_on_container = false }; h.prototype.input_focus = function (i) { var j = this; if (this.is_multiple) { if (!this.active_field) { return setTimeout((function () { return j.container_mousedown() }), 50) } } else { if (!this.active_field) { return this.activate_field() } } }; h.prototype.input_blur = function (i) { var j = this; if (!this.mouse_on_container) { this.active_field = false; return setTimeout((function () { return j.blur_test() }), 100) } }; h.prototype.results_option_build = function (j) { var k, n, m, i, l; k = ""; l = this.results_data; for (m = 0, i = l.length; m < i; m++) { n = l[m]; if (n.group) { k += this.result_add_group(n) } else { k += this.result_add_option(n) } if (j != null ? j.first : void 0) { if (n.selected && this.is_multiple) { this.choice_build(n) } else { if (n.selected && !this.is_multiple) { this.single_set_selected_text(n.text) } } } } return k }; h.prototype.result_add_option = function (k) { var i, j; if (!k.search_match) { return "" } if (!this.include_option_in_results(k)) { return "" } i = []; if (!k.disabled && !(k.selected && this.is_multiple)) { i.push("active-result") } if (k.disabled && !(k.selected && this.is_multiple)) { i.push("disabled-result") } if (k.selected) { i.push("result-selected") } if (k.group_array_index != null) { i.push("group-option") } if (k.classes !== "") { i.push(k.classes) } j = k.style.cssText !== "" ? ' style="' + k.style + '"' : ""; return '<li class="' + (i.join(" ")) + '"' + j + ' data-option-array-index="' + k.array_index + '">' + k.search_text + "</li>" }; h.prototype.result_add_group = function (i) { if (!(i.search_match || i.group_match)) { return "" } if (!(i.active_options > 0)) { return "" } return '<li class="group-result">' + i.search_text + "</li>" }; h.prototype.results_update_field = function () { this.set_default_text(); if (!this.is_multiple) { this.results_reset_cleanup() } this.result_clear_highlight(); this.result_single_selected = null; this.results_build(); if (this.results_showing) { return this.winnow_results() } }; h.prototype.results_toggle = function () { if (this.results_showing) { return this.results_hide() } else { return this.results_show() } }; h.prototype.results_search = function (i) { if (this.results_showing) { return this.winnow_results() } else { return this.results_show() } }; h.prototype.winnow_results = function () { var u, n, q, r, m, i, t, o, s, j, k, p, l; this.no_results_clear(); m = 0; t = this.get_search_text(); u = t.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"); r = this.search_contains ? "" : "^"; q = new RegExp(r + u, "i"); j = new RegExp(u, "i"); l = this.results_data; for (k = 0, p = l.length; k < p; k++) { n = l[k]; n.search_match = false; i = null; if (this.include_option_in_results(n)) { if (n.group) { n.group_match = false; n.active_options = 0 } if ((n.group_array_index != null) && this.results_data[n.group_array_index]) { i = this.results_data[n.group_array_index]; if (i.active_options === 0 && i.search_match) { m += 1 } i.active_options += 1 } if (!(n.group && !this.group_search)) { n.search_text = n.group ? n.label : n.html; n.search_match = this.search_string_match(n.search_text, q); if (n.search_match && !n.group) { m += 1 } if (n.search_match) { if (t.length) { o = n.search_text.search(j); s = n.search_text.substr(0, o + t.length) + "</em>" + n.search_text.substr(o + t.length); n.search_text = s.substr(0, o) + "<em>" + s.substr(o) } if (i != null) { i.group_match = true } } else { if ((n.group_array_index != null) && this.results_data[n.group_array_index].search_match) { n.search_match = true } } } } } this.result_clear_highlight(); if (m < 1 && t.length) { this.update_results_content(""); return this.no_results(t) } else { this.update_results_content(this.results_option_build()); return this.winnow_results_set_highlight() } }; h.prototype.search_string_match = function (n, k) { var j, m, l, i; if (k.test(n)) { return true } else { if (this.enable_split_word_search && (n.indexOf(" ") >= 0 || n.indexOf("[") === 0)) { m = n.replace(/\[|\]/g, "").split(" "); if (m.length) { for (l = 0, i = m.length; l < i; l++) { j = m[l]; if (k.test(j)) { return true } } } } } }; h.prototype.choices_count = function () { var j, l, i, k; if (this.selected_option_count != null) { return this.selected_option_count } this.selected_option_count = 0; k = this.form_field.options; for (l = 0, i = k.length; l < i; l++) { j = k[l]; if (j.selected) { this.selected_option_count += 1 } } return this.selected_option_count }; h.prototype.choices_click = function (i) { i.preventDefault(); if (!(this.results_showing || this.is_disabled)) { return this.results_show() } }; h.prototype.keyup_checker = function (i) { var k, j; k = (j = i.which) != null ? j : i.keyCode; this.search_field_scale(); switch (k) { case 8: if (this.is_multiple && this.backstroke_length < 1 && this.choices_count() > 0) { return this.keydown_backstroke() } else { if (!this.pending_backstroke) { this.result_clear_highlight(); return this.results_search() } } break; case 13: i.preventDefault(); if (this.results_showing) { return this.result_select(i) } break; case 27: if (this.results_showing) { this.results_hide() } return true; case 9: case 38: case 40: case 16: case 91: case 17: break; default: return this.results_search() } }; h.prototype.container_width = function () { if (this.options.width != null) { return this.options.width } else { return "" + this.form_field.offsetWidth + "px" } }; h.prototype.include_option_in_results = function (i) { if (this.is_multiple && (!this.display_selected_options && i.selected)) { return false } if (!this.display_disabled_options && i.disabled) { return false } if (i.empty) { return false } return true }; h.browser_is_supported = function () { if (window.navigator.appName === "Microsoft Internet Explorer") { return document.documentMode >= 8 } if (/iP(od|hone)/i.test(window.navigator.userAgent)) { return false } if (/Android/i.test(window.navigator.userAgent)) { if (/Mobile/i.test(window.navigator.userAgent)) { return false } } return true }; h.default_multiple_text = "Select Some Options"; h.default_single_text = "Select an Option"; h.default_no_result_text = "No results match"; return h })(); f = jQuery; f.fn.extend({ chosen: function (h) { if (!a.browser_is_supported()) { return this } return this.each(function (j) { var k, i; k = f(this); i = k.data("chosen"); if (h === "destroy" && i) { i.destroy() } else { if (!i) { k.data("chosen", new g(this, h)) } } }) } }); g = (function (h) { c(i, h); function i() { e = i.__super__.constructor.apply(this, arguments); return e } i.prototype.setup = function () { this.form_field_jq = f(this.form_field); this.current_selectedIndex = this.form_field.selectedIndex; return this.is_rtl = this.form_field_jq.hasClass("chosen-rtl") }; i.prototype.set_up_html = function () { var j, k; j = ["chosen-container"]; j.push("chosen-container-" + (this.is_multiple ? "multi" : "single")); if (this.inherit_select_classes && this.form_field.className) { j.push(this.form_field.className) } if (this.is_rtl) { j.push("chosen-rtl") } k = { "class": j.join(" "), "style": "width: " + (this.container_width()) + ";", "title": this.form_field.title }; if (this.form_field.id.length) { k.id = this.form_field.id.replace(/[^\w]/g, "_") + "_chosen" } this.container = f("<div />", k); if (this.is_multiple) { this.container.html('<ul class="chosen-choices"><li class="search-field"><input type="text" value="' + this.default_text + '" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chosen-drop"><ul class="chosen-results"></ul></div>') } else { this.container.html('<a class="chosen-single chosen-default" tabindex="-1"><span>' + this.default_text + '</span><div><b></b></div></a><div class="chosen-drop"><div class="chosen-search"><input type="text" autocomplete="off" /></div><ul class="chosen-results"></ul></div>') } this.form_field_jq.hide().after(this.container); this.dropdown = this.container.find("div.chosen-drop").first(); this.search_field = this.container.find("input").first(); this.search_results = this.container.find("ul.chosen-results").first(); this.search_field_scale(); this.search_no_results = this.container.find("li.no-results").first(); if (this.is_multiple) { this.search_choices = this.container.find("ul.chosen-choices").first(); this.search_container = this.container.find("li.search-field").first() } else { this.search_container = this.container.find("div.chosen-search").first(); this.selected_item = this.container.find(".chosen-single").first() } this.results_build(); this.set_tab_index(); this.set_label_behavior(); return this.form_field_jq.trigger("chosen:ready", { chosen: this }) }; i.prototype.register_observers = function () { var j = this; this.container.bind("mousedown.chosen", function (k) { j.container_mousedown(k) }); this.container.bind("mouseup.chosen", function (k) { j.container_mouseup(k) }); this.container.bind("mouseenter.chosen", function (k) { j.mouse_enter(k) }); this.container.bind("mouseleave.chosen", function (k) { j.mouse_leave(k) }); this.search_results.bind("mouseup.chosen", function (k) { j.search_results_mouseup(k) }); this.search_results.bind("mouseover.chosen", function (k) { j.search_results_mouseover(k) }); this.search_results.bind("mouseout.chosen", function (k) { j.search_results_mouseout(k) }); this.search_results.bind("mousewheel.chosen DOMMouseScroll.chosen", function (k) { j.search_results_mousewheel(k) }); this.form_field_jq.bind("chosen:updated.chosen", function (k) { j.results_update_field(k) }); this.form_field_jq.bind("chosen:activate.chosen", function (k) { j.activate_field(k) }); this.form_field_jq.bind("chosen:open.chosen", function (k) { j.container_mousedown(k) }); this.search_field.bind("blur.chosen", function (k) { j.input_blur(k) }); this.search_field.bind("keyup.chosen", function (k) { j.keyup_checker(k) }); this.search_field.bind("keydown.chosen", function (k) { j.keydown_checker(k) }); this.search_field.bind("focus.chosen", function (k) { j.input_focus(k) }); if (this.is_multiple) { return this.search_choices.bind("click.chosen", function (k) { j.choices_click(k) }) } else { return this.container.bind("click.chosen", function (k) { k.preventDefault() }) } }; i.prototype.destroy = function () { f(document).unbind("click.chosen", this.click_test_action); if (this.search_field[0].tabIndex) { this.form_field_jq[0].tabIndex = this.search_field[0].tabIndex } this.container.remove(); this.form_field_jq.removeData("chosen"); return this.form_field_jq.show() }; i.prototype.search_field_disabled = function () { this.is_disabled = this.form_field_jq[0].disabled; if (this.is_disabled) { this.container.addClass("chosen-disabled"); this.search_field[0].disabled = true; if (!this.is_multiple) { this.selected_item.unbind("focus.chosen", this.activate_action) } return this.close_field() } else { this.container.removeClass("chosen-disabled"); this.search_field[0].disabled = false; if (!this.is_multiple) { return this.selected_item.bind("focus.chosen", this.activate_action) } } }; i.prototype.container_mousedown = function (j) { if (!this.is_disabled) { if (j && j.type === "mousedown" && !this.results_showing) { j.preventDefault() } if (!((j != null) && (f(j.target)).hasClass("search-choice-close"))) { if (!this.active_field) { if (this.is_multiple) { this.search_field.val("") } f(document).bind("click.chosen", this.click_test_action); this.results_show() } else { if (!this.is_multiple && j && ((f(j.target)[0] === this.selected_item[0]) || f(j.target).parents("a.chosen-single").length)) { j.preventDefault(); this.results_toggle() } } return this.activate_field() } } }; i.prototype.container_mouseup = function (j) { if (j.target.nodeName === "ABBR" && !this.is_disabled) { return this.results_reset(j) } }; i.prototype.search_results_mousewheel = function (k) { var m, j, l; m = -((j = k.originalEvent) != null ? j.wheelDelta : void 0) || ((l = k.originialEvent) != null ? l.detail : void 0); if (m != null) { k.preventDefault(); if (k.type === "DOMMouseScroll") { m = m * 40 } return this.search_results.scrollTop(m + this.search_results.scrollTop()) } }; i.prototype.blur_test = function (j) { if (!this.active_field && this.container.hasClass("chosen-container-active")) { return this.close_field() } }; i.prototype.close_field = function () { f(document).unbind("click.chosen", this.click_test_action); this.active_field = false; this.results_hide(); this.container.removeClass("chosen-container-active"); this.clear_backstroke(); this.show_search_field_default(); return this.search_field_scale() }; i.prototype.activate_field = function () { this.container.addClass("chosen-container-active"); this.active_field = true; this.search_field.val(this.search_field.val()); return this.search_field.focus() }; i.prototype.test_active_click = function (j) { if (this.container.is(f(j.target).closest(".chosen-container"))) { return this.active_field = true } else { return this.close_field() } }; i.prototype.results_build = function () { this.parsing = true; this.selected_option_count = null; this.results_data = d.select_to_array(this.form_field); if (this.is_multiple) { this.search_choices.find("li.search-choice").remove() } else { if (!this.is_multiple) { this.single_set_selected_text(); if (this.disable_search || this.form_field.options.length <= this.disable_search_threshold) { this.search_field[0].readOnly = true; this.container.addClass("chosen-container-single-nosearch") } else { this.search_field[0].readOnly = false; this.container.removeClass("chosen-container-single-nosearch") } } } this.update_results_content(this.results_option_build({ first: true })); this.search_field_disabled(); this.show_search_field_default(); this.search_field_scale(); return this.parsing = false }; i.prototype.result_do_highlight = function (k) { var o, n, l, m, j; if (k.length) { this.result_clear_highlight(); this.result_highlight = k; this.result_highlight.addClass("highlighted"); l = parseInt(this.search_results.css("maxHeight"), 10); j = this.search_results.scrollTop(); m = l + j; n = this.result_highlight.position().top + this.search_results.scrollTop(); o = n + this.result_highlight.outerHeight(); if (o >= m) { return this.search_results.scrollTop((o - l) > 0 ? o - l : 0) } else { if (n < j) { return this.search_results.scrollTop(n) } } } }; i.prototype.result_clear_highlight = function () { if (this.result_highlight) { this.result_highlight.removeClass("highlighted") } return this.result_highlight = null }; i.prototype.results_show = function () { if (this.is_multiple && this.max_selected_options <= this.choices_count()) { this.form_field_jq.trigger("chosen:maxselected", { chosen: this }); return false } this.container.addClass("chosen-with-drop"); this.form_field_jq.trigger("chosen:showing_dropdown", { chosen: this }); this.results_showing = true; this.search_field.focus(); this.search_field.val(this.search_field.val()); return this.winnow_results() }; i.prototype.update_results_content = function (j) { return this.search_results.html(j) }; i.prototype.results_hide = function () { if (this.results_showing) { this.result_clear_highlight(); this.container.removeClass("chosen-with-drop"); this.form_field_jq.trigger("chosen:hiding_dropdown", { chosen: this }) } return this.results_showing = false }; i.prototype.set_tab_index = function (k) { var j; if (this.form_field.tabIndex) { j = this.form_field.tabIndex; this.form_field.tabIndex = -1; return this.search_field[0].tabIndex = j } }; i.prototype.set_label_behavior = function () { var j = this; this.form_field_label = this.form_field_jq.parents("label"); if (!this.form_field_label.length && this.form_field.id.length) { this.form_field_label = f("label[for='" + this.form_field.id + "']") } if (this.form_field_label.length > 0) { return this.form_field_label.bind("click.chosen", function (k) { if (j.is_multiple) { return j.container_mousedown(k) } else { return j.activate_field() } }) } }; i.prototype.show_search_field_default = function () { if (this.is_multiple && this.choices_count() < 1 && !this.active_field) { this.search_field.val(this.default_text); return this.search_field.addClass("default") } else { this.search_field.val(""); return this.search_field.removeClass("default") } }; i.prototype.search_results_mouseup = function (j) { var k; k = f(j.target).hasClass("active-result") ? f(j.target) : f(j.target).parents(".active-result").first(); if (k.length) { this.result_highlight = k; this.result_select(j); return this.search_field.focus() } }; i.prototype.search_results_mouseover = function (j) { var k; k = f(j.target).hasClass("active-result") ? f(j.target) : f(j.target).parents(".active-result").first(); if (k) { return this.result_do_highlight(k) } }; i.prototype.search_results_mouseout = function (j) { if (f(j.target).hasClass("active-result" || f(j.target).parents(".active-result").first())) { return this.result_clear_highlight() } }; i.prototype.choice_build = function (k) { var j, l, m = this; j = f("<li />", { "class": "search-choice" }).html("<span>" + k.html + "</span>"); if (k.disabled) { j.addClass("search-choice-disabled") } else { l = f("<a />", { "class": "search-choice-close", "data-option-array-index": k.array_index }); l.bind("click.chosen", function (n) { return m.choice_destroy_link_click(n) }); j.append(l) } return this.search_container.before(j) }; i.prototype.choice_destroy_link_click = function (j) { j.preventDefault(); j.stopPropagation(); if (!this.is_disabled) { return this.choice_destroy(f(j.target)) } }; i.prototype.choice_destroy = function (j) { if (this.result_deselect(j[0].getAttribute("data-option-array-index"))) { this.show_search_field_default(); if (this.is_multiple && this.choices_count() > 0 && this.search_field.val().length < 1) { this.results_hide() } j.parents("li").first().remove(); return this.search_field_scale() } }; i.prototype.results_reset = function () { this.form_field.options[0].selected = true; this.selected_option_count = null; this.single_set_selected_text(); this.show_search_field_default(); this.results_reset_cleanup(); this.form_field_jq.trigger("change"); if (this.active_field) { return this.results_hide() } }; i.prototype.results_reset_cleanup = function () { this.current_selectedIndex = this.form_field.selectedIndex; return this.selected_item.find("abbr").remove() }; i.prototype.result_select = function (k) { var m, l, j; if (this.result_highlight) { m = this.result_highlight; this.result_clear_highlight(); if (this.is_multiple && this.max_selected_options <= this.choices_count()) { this.form_field_jq.trigger("chosen:maxselected", { chosen: this }); return false } if (this.is_multiple) { m.removeClass("active-result") } else { if (this.result_single_selected) { this.result_single_selected.removeClass("result-selected"); j = this.result_single_selected[0].getAttribute("data-option-array-index"); this.results_data[j].selected = false } this.result_single_selected = m } m.addClass("result-selected"); l = this.results_data[m[0].getAttribute("data-option-array-index")]; l.selected = true; this.form_field.options[l.options_index].selected = true; this.selected_option_count = null; if (this.is_multiple) { this.choice_build(l) } else { this.single_set_selected_text(l.text) } if (!((k.metaKey || k.ctrlKey) && this.is_multiple)) { this.results_hide() } this.search_field.val(""); if (this.is_multiple || this.form_field.selectedIndex !== this.current_selectedIndex) { this.form_field_jq.trigger("change", { "selected": this.form_field.options[l.options_index].value }) } this.current_selectedIndex = this.form_field.selectedIndex; return this.search_field_scale() } }; i.prototype.single_set_selected_text = function (j) { if (j == null) { j = this.default_text } if (j === this.default_text) { this.selected_item.addClass("chosen-default") } else { this.single_deselect_control_build(); this.selected_item.removeClass("chosen-default") } return this.selected_item.find("span").text(j) }; i.prototype.result_deselect = function (k) { var j; j = this.results_data[k]; if (!this.form_field.options[j.options_index].disabled) { j.selected = false; this.form_field.options[j.options_index].selected = false; this.selected_option_count = null; this.result_clear_highlight(); if (this.results_showing) { this.winnow_results() } this.form_field_jq.trigger("change", { deselected: this.form_field.options[j.options_index].value }); this.search_field_scale(); return true } else { return false } }; i.prototype.single_deselect_control_build = function () { if (!this.allow_single_deselect) { return } if (!this.selected_item.find("abbr").length) { this.selected_item.find("span").first().after('<abbr class="search-choice-close"></abbr>') } return this.selected_item.addClass("chosen-single-with-deselect") }; i.prototype.get_search_text = function () { if (this.search_field.val() === this.default_text) { return "" } else { return f("<div/>").text(f.trim(this.search_field.val())).html() } }; i.prototype.winnow_results_set_highlight = function () { var j, k; k = !this.is_multiple ? this.search_results.find(".result-selected.active-result") : []; j = k.length ? k.first() : this.search_results.find(".active-result").first(); if (j != null) { return this.result_do_highlight(j) } }; i.prototype.no_results = function (j) { var k; k = f('<li class="no-results">' + this.results_none_found + ' "<span></span>"</li>'); k.find("span").first().html(j); return this.search_results.append(k) }; i.prototype.no_results_clear = function () { return this.search_results.find(".no-results").remove() }; i.prototype.keydown_arrow = function () { var j; if (this.results_showing && this.result_highlight) { j = this.result_highlight.nextAll("li.active-result").first(); if (j) { return this.result_do_highlight(j) } } else { return this.results_show() } }; i.prototype.keyup_arrow = function () { var j; if (!this.results_showing && !this.is_multiple) { return this.results_show() } else { if (this.result_highlight) { j = this.result_highlight.prevAll("li.active-result"); if (j.length) { return this.result_do_highlight(j.first()) } else { if (this.choices_count() > 0) { this.results_hide() } return this.result_clear_highlight() } } } }; i.prototype.keydown_backstroke = function () { var j; if (this.pending_backstroke) { this.choice_destroy(this.pending_backstroke.find("a").first()); return this.clear_backstroke() } else { j = this.search_container.siblings("li.search-choice").last(); if (j.length && !j.hasClass("search-choice-disabled")) { this.pending_backstroke = j; if (this.single_backstroke_delete) { return this.keydown_backstroke() } else { return this.pending_backstroke.addClass("search-choice-focus") } } } }; i.prototype.clear_backstroke = function () { if (this.pending_backstroke) { this.pending_backstroke.removeClass("search-choice-focus") } return this.pending_backstroke = null }; i.prototype.keydown_checker = function (k) { var l, j; l = (j = k.which) != null ? j : k.keyCode; this.search_field_scale(); if (l !== 8 && this.pending_backstroke) { this.clear_backstroke() } switch (l) { case 8: this.backstroke_length = this.search_field.val().length; break; case 9: if (this.results_showing && !this.is_multiple) { this.result_select(k) } this.mouse_on_container = false; break; case 13: k.preventDefault(); break; case 38: k.preventDefault(); this.keyup_arrow(); break; case 40: k.preventDefault(); this.keydown_arrow(); break } }; i.prototype.search_field_scale = function () { var j, n, m, k, q, r, p, l, o; if (this.is_multiple) { m = 0; p = 0; q = "position:absolute; left: -1000px; top: -1000px; display:none;"; r = ["font-size", "font-style", "font-weight", "font-family", "line-height", "text-transform", "letter-spacing"]; for (l = 0, o = r.length; l < o; l++) { k = r[l]; q += k + ":" + this.search_field.css(k) + ";" } j = f("<div />", { "style": q }); j.text(this.search_field.val()); f("body").append(j); p = j.width() + 25; j.remove(); n = this.container.outerWidth(); if (p > n - 10) { p = n - 10 } return this.search_field.css({ "width": p + "px" }) } }; return i })(a) }).call(this);
(function (e) { var a = 0; var b = { iframe: "iframe", popup: "popup" }; var d = { mode: b.iframe, popHt: 500, popWd: 400, popX: 200, popY: 200, popTitle: "", popClose: false }; var c = {}; e.fn.printArea = function (n) { e.extend(c, d, n); a++; var o = "printArea_"; e("[id^=" + o + "]").remove(); var q = i(e(this)); c.id = o + a; var l; var m; switch (c.mode) { case b.iframe: var p = new g(); l = p.doc; m = p.contentWindow || p; break; case b.popup: m = new k(); l = m.doc } l.open(); l.write(h() + "<html>" + j() + f(q) + "</html>"); l.close(); m.focus(); m.print(); if (c.mode == b.popup && c.popClose) { m.close() } }; function h() { if (c.mode == b.iframe || !c.strict) { return "" } var l = c.strict == false ? " Trasitional" : ""; var m = c.strict == false ? "loose" : "strict"; return '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01' + l + '//EN" "http://www.w3.org/TR/html4/' + m + '.dtd">' } function j() { var l = "<head><title>" + c.popTitle + "</title>"; e(document).find("link").filter(function () { return e(this).attr("rel").toLowerCase() == "stylesheet" }).filter(function () { var m = e(this).attr("media") || ""; return (m.toLowerCase() == "" || m.toLowerCase() == "print") }).each(function () { l += '<link type="text/css" rel="stylesheet" href="' + e(this).attr("href") + '" >' }); l += "</head>"; return l } function f(l) { return '<body><div class="' + e(l).attr("class") + '">' + e(l).html() + "</div></body>" } function i(l) { e("input,select,textarea", l).each(function () { var n = e(this).attr("type"); if (n == "radio" || n == "checkbox") { if (e(this).is(":not(:checked)")) { this.removeAttribute("checked") } else { this.setAttribute("checked", true) } } else { if (n == "text") { this.setAttribute("value", e(this).val()) } else { if (n == "select-multiple" || n == "select-one") { e(this).find("option").each(function () { if (e(this).is(":not(:selected)")) { this.removeAttribute("selected") } else { this.setAttribute("selected", true) } }) } else { if (n == "textarea") { var m = e(this).attr("value"); if (e.browser.mozilla) { if (this.firstChild) { this.firstChild.textContent = m } else { this.textContent = m } } else { this.innerHTML = m } } } } } }); return l } function g() { var n = c.id; var l = "border:0;position:absolute;width:0px;height:0px;left:0px;top:0px;"; var m; try { m = document.createElement("iframe"); document.body.appendChild(m); e(m).attr({ style: l, id: n, src: "" }); m.doc = null; m.doc = m.contentDocument ? m.contentDocument : (m.contentWindow ? m.contentWindow.document : m.document) } catch (o) { throw o + ". iframes may not be supported in this browser." } if (m.doc == null) { throw "Cannot find document." } return m } function k() { var m = "location=yes,statusbar=no,directories=no,menubar=no,titlebar=no,toolbar=no,dependent=no"; m += ",width=" + c.popWd + ",height=" + c.popHt; m += ",resizable=yes,screenX=" + c.popX + ",screenY=" + c.popY + ",personalbar=no,scrollbars=no"; var l = window.open("", "_blank", m); l.doc = l.document; return l } })(jQuery);

